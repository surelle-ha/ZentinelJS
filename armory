#!/usr/bin/env node
require("module-alias/register");
const { Command } = require("commander");
const chalk = require("chalk");
const path = require("path");

class Armory {
	static program = new Command();
	static version = "1.0.0";

	static getTimestamp() {
		const now = new Date();
		return `${now.toISOString().replace("T", " ").split(".")[0]}`; 
	}

	static logWithTimestamp(message, color = "white") {
		const timestamp = Armory.getTimestamp();
		console.log(chalk[color](`[${timestamp}] ${message}`));
	}

	static showLoading = async (message, action) => {
		const ora = (await import("ora")).default;
		const spinner = ora(message).start();
		try {
			await action();
			spinner.succeed("Completed!");
		} catch (error) {
			spinner.fail("Failed!");
			this.logWithTimestamp(error, "red");
		}
	};

	static configFilePath = path.resolve(process.cwd(), "zentinel.config.js");
	static modelsDir = path.resolve(process.cwd(), "app/models");
	static controllersDir = path.resolve(process.cwd(), "app/controllers");
	static routesDir = path.resolve(process.cwd(), "app/routes");
	static validationsDir = path.resolve(process.cwd(), "app/validations");
	static middlewaresDir = path.resolve(process.cwd(), "app/middlewares");
	static servicesDir = path.resolve(process.cwd(), "app/services");
	static utilitiesDir = path.resolve(process.cwd(), "app/utilities");
	static exceptionsDir = path.resolve(process.cwd(), "app/exceptions");
}

Armory.program
	.version(Armory.version)
	.description("Armory CLI - A Node.js tool similar to Laravel's Artisan");

// Define commands with shortcuts
require("@console/armory_basic")(Armory);
require("@console/armory_ipinfo")(Armory);
require("@console/armory_install")(Armory);
require("@console/armory_validate")(Armory);
require("@console/armory_controller")(Armory);
require("@console/armory_key")(Armory);

Armory.program.arguments("").action((unknownCommand) => {
	Armory.logWithTimestamp(`Invalid command: ${unknownCommand}`, "red");
});

Armory.program.parse(process.argv);

if (process.argv.length <= 2) {
	Armory.program.help();
}
